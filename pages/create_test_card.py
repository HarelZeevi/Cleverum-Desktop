# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'create_test_card.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import requests
from PyQt5 import QtCore, QtGui, QtWidgets
import keyring
import json
from test_card import TestCard


class Ui_Frame(object):
 
    def setupUi(self, test_card):
        test_card.setObjectName("test_card")
        test_card.resize(273, 447)
        test_card.setStyleSheet("QFrame{\n"
"    background-color: #2C2F33;\n"
"    color: beige;\n"
"    padding: 4px;\n"
"}")
        self.verticalLayout = QtWidgets.QVBoxLayout(test_card)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame = QtWidgets.QFrame(test_card)
        self.frame.setStyleSheet("QFrame{\n"
"    background-color: #2C2F33;\n"
"    color: beige;\n"
"    border: 0px;\n"
"}")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_14 = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_14.sizePolicy().hasHeightForWidth())
        self.label_14.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("URW Bookman [UKWN]")
        font.setPointSize(15)
        self.label_14.setFont(font)
        self.label_14.setStyleSheet("QFrame{\n"
"    border: 0px;\n"
"}")
        self.label_14.setObjectName("label_14")
        self.verticalLayout_4.addWidget(self.label_14)
        self.create_test_card_2 = QtWidgets.QFrame(self.frame)
        self.create_test_card_2.setStyleSheet("QFrame{\n"
"    border: 0px;\n"
"}")
        self.create_test_card_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.create_test_card_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.create_test_card_2.setObjectName("create_test_card_2")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.create_test_card_2)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setSpacing(6)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.timeLimit = QtWidgets.QTimeEdit(self.create_test_card_2)
        self.timeLimit.setStyleSheet("QTimeEdit{\n"
"    color:white;\n"
"}\n"
"\n"
"QTimeEdit:focus{\n"
"    border: 1px solid rgb(170, 255, 0)  ;\n"
"}")
        self.timeLimit.setObjectName("timeLimit")
        self.verticalLayout_5.addWidget(self.timeLimit)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_5.addItem(spacerItem)
        self.label_15 = QtWidgets.QLabel(self.create_test_card_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_15.sizePolicy().hasHeightForWidth())
        self.label_15.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("URW Bookman [UKWN]")
        font.setPointSize(15)
        self.label_15.setFont(font)
        self.label_15.setStyleSheet("QFrame{\n"
"    border: 0px;\n"
"}")
        self.label_15.setObjectName("label_15")
        self.verticalLayout_5.addWidget(self.label_15)
        self.topic = QtWidgets.QLineEdit(self.create_test_card_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.topic.sizePolicy().hasHeightForWidth())
        self.topic.setSizePolicy(sizePolicy)
        self.topic.setStyleSheet("QLineEdit{\n"
"    color:white;\n"
"}\n"
"\n"
"QLineEdit:focus{\n"
"    border: 1px solid rgb(170, 255, 0)  ;\n"
"}")
        self.topic.setObjectName("topic")
        self.verticalLayout_5.addWidget(self.topic)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_5.addItem(spacerItem1)
        self.label_16 = QtWidgets.QLabel(self.create_test_card_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_16.sizePolicy().hasHeightForWidth())
        self.label_16.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("URW Bookman [UKWN]")
        font.setPointSize(15)
        self.label_16.setFont(font)
        self.label_16.setStyleSheet("QFrame{\n"
"    border: 0px;\n"
"}")
        self.label_16.setObjectName("label_16")
        self.verticalLayout_5.addWidget(self.label_16)
        self.subtopic = QtWidgets.QLineEdit(self.create_test_card_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.subtopic.sizePolicy().hasHeightForWidth())
        self.subtopic.setSizePolicy(sizePolicy)
        self.subtopic.setStyleSheet("QLineEdit{\n"
"    color:white;\n"
"}\n"
"\n"
"QLineEdit:focus{\n"
"    border: 1px solid rgb(170, 255, 0)  ;\n"
"}")
        self.subtopic.setObjectName("subtopic")
        self.verticalLayout_5.addWidget(self.subtopic)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_5.addItem(spacerItem2)
        self.label_17 = QtWidgets.QLabel(self.create_test_card_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_17.sizePolicy().hasHeightForWidth())
        self.label_17.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("URW Bookman [UKWN]")
        font.setPointSize(15)
        font.setBold(False)
        font.setWeight(50)
        self.label_17.setFont(font)
        self.label_17.setStyleSheet("QFrame{\n"
"    border: 0px;\n"
"}")
        self.label_17.setObjectName("label_17")
        self.verticalLayout_5.addWidget(self.label_17)
        self.grade = QtWidgets.QLineEdit(self.create_test_card_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.grade.sizePolicy().hasHeightForWidth())
        self.grade.setSizePolicy(sizePolicy)
        self.grade.setStyleSheet("QLineEdit{\n"
"    color:white;\n"
"}\n"
"\n"
"QLineEdit:focus{\n"
"    border: 1px solid rgb(170, 255, 0)  ;\n"
"}")
        self.grade.setObjectName("grade")
        self.verticalLayout_5.addWidget(self.grade)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_5.addItem(spacerItem3)
        self.save_btn = QtWidgets.QPushButton(self.create_test_card_2)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.save_btn.setFont(font)
        self.save_btn.setStyleSheet("QPushButton{\n"
"    color: black;\n"
"    background-color: #FED049;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: beige;\n"
"    padding: 6px;\n"
"\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"        background-color: #7289DA;\n"
"        color: white;\n"
"}")
        self.save_btn.setObjectName("save_btn")
        self.verticalLayout_5.addWidget(self.save_btn)
        self.undo_btn = QtWidgets.QPushButton(self.create_test_card_2)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.undo_btn.setFont(font)
        self.undo_btn.setStyleSheet("QPushButton{\n"
"    color: black;\n"
"    background-color: #ff4b4b;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: beige;\n"
"    padding: 6px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"        background-color: black;\n"
"        color: white;\n"
"}")
        self.undo_btn.setObjectName("undo_btn")
        self.verticalLayout_5.addWidget(self.undo_btn)
        self.verticalLayout_4.addWidget(self.create_test_card_2)
        self.verticalLayout.addWidget(self.frame)

        self.retranslateUi(test_card)
        QtCore.QMetaObject.connectSlotsByName(test_card)

    def retranslateUi(self, test_card):
        _translate = QtCore.QCoreApplication.translate
        test_card.setWindowTitle(_translate("test_card", "Frame"))
        self.label_14.setText(_translate("test_card", "Time Limit"))
        self.label_15.setText(_translate("test_card", "Topic "))
        self.label_16.setText(_translate("test_card", "Sub-topic"))
        self.label_17.setText(_translate("test_card", "Grade"))
        self.save_btn.setText(_translate("test_card", "Save"))
        self.undo_btn.setText(_translate("test_card", "Undo"))


class CreateTestCard(Ui_Frame): 
    '''this classes adds the page switching funcitonality to the generated code'''
     
    # init pages stack
    def __init__(self, stacked_pages):
        self.stacked_pages = stacked_pages
    

    def setupUi(self, Form, stackedWidget, tests):
        ''' this function gets the stacked widget and changes 
        the shown page according to the events in the page '''
         
        super().setupUi(Form)
         
        # define stack widget as a class property that is accessible within the class 
        self.stackedWidget = stackedWidget

        # 'Save' button event that switches the 'create test' card to 'test' card and saves the test
        self.save_btn.clicked.connect(lambda: self.save_test())
 
        # 'Undo' button event that goes back to 'add test' card
        self.undo_btn.clicked.connect(lambda: self.undo()) 
        
        # the tests list that will be updated when a new test is created
        self.tests = tests



    def clear_stack(self):
        '''this function clears the current qstackedwidget
            object from all of it's widgets'''


        # looping through widgets in qstackedwidget
        for i in range(self.stackedWidget.count() - 1, -1, -1):
            
            # remove each widget
            current = self.stackedWidget.widget(i)
            self.stackedWidget.removeWidget(current)



    # this function will be called before the page is rendered with the tests 
    def get_tests(self):
        ''' this function gets the tests that were created by the user'''
        
        
        # define the service name and account name to use for the jwt
        service_name = "myapp"
        account_name = "jwt_teacher"

        # retrieve the jwt from the keyring
        jwt_value = keyring.get_password(service_name, account_name)

        # add the jwt_value to the headers
        headers = {"authorization": f"bearer {jwt_value}"}
            
        url = "https://cleverum.azurewebsites.net/api/teacher/getTests"
        r = requests.get(url, headers=headers)
        
        # update the list of tests globally with the the test that was just added 
        self.tests.append(json.loads(r.text)[-1])
   


    # this function will be called when the 'save' button is clicked 
    def save_test(self):
        ''' this function switches to 'test_card' frame from 'create_test_card' frame
            and saves the created test to the database '''
        
        self.stackedWidget.setCurrentIndex(2) 
      
        # define the http request parameters 
        PARAMS = {
                "timeLimit": str(self.timeLimit.time().toPyTime()),
                "topic": self.topic.text(),
                "subtopic": self.subtopic.text(), 
                "grade": self.grade.text()
        }
        
        print(PARAMS) 
        # Define the service name and account name to use for the JWT
        service_name = "myapp"
        account_name = "jwt_teacher"

        # Retrieve the JWT from the keyring
        jwt_value = keyring.get_password(service_name, account_name)
 
        # add the jwt_value to the headers
        HEADERS = {"Authorization": f"Bearer {jwt_value}"}
            
        URL = "https://cleverum.azurewebsites.net/api/teacher/createTest"
        r = requests.post(URL, headers=HEADERS, json=PARAMS)
       
        # clear stack 
        self.clear_stack()
        
        # refresh the list of test after the new test was added
        self.get_tests()

        # test card stack
        self.test = QtWidgets.QFrame()
        ui = TestCard(self.tests, len(self.tests) - 1, self.stacked_pages)
        ui.setupUi(self.test, self.stackedWidget)
        self.test.setObjectName("test")
        self.stackedWidget.addWidget(self.test)
       
        if r.ok:
            print("Done successfully!")
        print(r.text)


    # this function will be called when the undo button is clicked
    def undo(self):
        ''' This function goes back to 'add test' card without saving the changes '''
        self.stackedWidget.setCurrentIndex(0)




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    test_card = QtWidgets.QFrame()
    ui = Ui_Frame()
    ui.setupUi(test_card)
    test_card.show()
    sys.exit(app.exec_())
