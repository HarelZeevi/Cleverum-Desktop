# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test_panel.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import resources
import keyring
import requests
import base64
import json
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *



class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1456, 664)
        Form.setWindowOpacity(1.0)
        Form.setStyleSheet("background-color:#001E6C;")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(560, 90, 301, 51))
        font = QtGui.QFont()
        font.setFamily("Sitka Text")
        font.setPointSize(26)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("color: white;")
        self.label_3.setObjectName("label_3")
        self.panel = QtWidgets.QFrame(Form)
        self.panel.setGeometry(QtCore.QRect(110, 210, 1241, 301))
        self.panel.setStyleSheet("QFrame{\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 5px;\n"
"    border-color: black;\n"
"    padding: 4px;    \n"
"    background-color: #035397;\n"
"}")
        self.panel.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.panel.setFrameShadow(QtWidgets.QFrame.Raised)
        self.panel.setObjectName("panel")
        self.gridLayout = QtWidgets.QGridLayout(self.panel)
        self.gridLayout.setObjectName("gridLayout")
        self.container1 = QtWidgets.QFrame(self.panel)
        self.container1.setStyleSheet("background-color: #2D033B;\n"
"color: white;\n"
"padding: 0px;\n"
"margin: 0px;")
        self.container1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.container1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.container1.setObjectName("container1")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.container1)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.name1 = QtWidgets.QLabel(self.container1)
        self.name1.setMaximumSize(QtCore.QSize(16777215, 35))
        font = QtGui.QFont()
        font.setFamily("aakar")
        font.setPointSize(22)
        self.name1.setFont(font)
        self.name1.setStyleSheet("border: 0px;\n"
"padding: 0px;")
        self.name1.setObjectName("name1")
        self.verticalLayout_3.addWidget(self.name1, 0, QtCore.Qt.AlignHCenter)
        self.frame_7 = QtWidgets.QFrame(self.container1)
        self.frame_7.setStyleSheet("border: 0px;\n"
"background-color: #2D033B;\n"
"color: white;\n"
"padding: 0px;\n"
"margin: 0px;")
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.frame_7)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.camera1 = QtWidgets.QFrame(self.frame_7)
        self.camera1.setStyleSheet("")
        self.camera1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.camera1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.camera1.setObjectName("camera1")
        self.gridLayout_4.addWidget(self.camera1, 1, 0, 1, 1)
        self.screenshot1 = QtWidgets.QFrame(self.frame_7)
        self.screenshot1.setStyleSheet("")
        self.screenshot1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.screenshot1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.screenshot1.setObjectName("screenshot1")
        self.gridLayout_4.addWidget(self.screenshot1, 1, 1, 1, 1)
        self.verticalLayout_3.addWidget(self.frame_7)
        self.gridLayout.addWidget(self.container1, 0, 0, 1, 1)
        self.container2 = QtWidgets.QFrame(self.panel)
        self.container2.setStyleSheet("background-color: #2D033B;\n"
"color: white;\n"
"padding: 0px;\n"
"margin: 0px;")
        self.container2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.container2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.container2.setObjectName("container2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.container2)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.name2 = QtWidgets.QLabel(self.container2)
        self.name2.setMaximumSize(QtCore.QSize(16777215, 35))
        font = QtGui.QFont()
        font.setFamily("aakar")
        font.setPointSize(22)
        self.name2.setFont(font)
        self.name2.setStyleSheet("border: 0px;\n"
"padding: 0px;")
        self.name2.setObjectName("name2")
        self.verticalLayout_2.addWidget(self.name2, 0, QtCore.Qt.AlignHCenter)
        self.frame_6 = QtWidgets.QFrame(self.container2)
        self.frame_6.setStyleSheet("border: 0px;\n"
"background-color: #2D033B;\n"
"color: white;\n"
"padding: 0px;\n"
"margin: 0px;")
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame_6)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.camera2 = QtWidgets.QFrame(self.frame_6)
        self.camera2.setStyleSheet("padding:10px;")
        self.camera2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.camera2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.camera2.setObjectName("camera2")
        self.gridLayout_3.addWidget(self.camera2, 1, 0, 1, 1)
        self.screenshot2 = QtWidgets.QFrame(self.frame_6)
        self.screenshot2.setStyleSheet("")
        self.screenshot2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.screenshot2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.screenshot2.setObjectName("screenshot2")
        self.gridLayout_3.addWidget(self.screenshot2, 1, 1, 1, 1)
        self.verticalLayout_2.addWidget(self.frame_6)
        self.gridLayout.addWidget(self.container2, 0, 1, 1, 1)
        self.time = QtWidgets.QLabel(Form)
        self.time.setGeometry(QtCore.QRect(10, 20, 361, 51))
        font = QtGui.QFont()
        font.setFamily("FreeMono")
        font.setPointSize(22)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.time.setFont(font)
        self.time.setStyleSheet("color: beige;\n"
"border: 1px solid beige;\n"
"padding: 6px;\n"
"color: white;\n"
"border-radius: 10px;")
        self.time.setObjectName("label_37")
        self.next_btn = QtWidgets.QPushButton(Form)
        self.next_btn.setGeometry(QtCore.QRect(1370, 320, 71, 71))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.next_btn.setFont(font)
        self.next_btn.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.next_btn.setAutoFillBackground(False)
        self.next_btn.setStyleSheet("QPushButton{\n"
"    background-color: #035397;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius:5px;\n"
"    border-color: beige;\n"
"    padding: 0px;\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: #7289DA;\n"
"}")
        self.next_btn.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/icons/next.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.next_btn.setIcon(icon)
        self.next_btn.setIconSize(QtCore.QSize(170, 170))
        self.next_btn.setObjectName("next_btn")
        self.previous_btn = QtWidgets.QPushButton(Form)
        self.previous_btn.setGeometry(QtCore.QRect(20, 320, 71, 71))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.previous_btn.sizePolicy().hasHeightForWidth())
        self.previous_btn.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.previous_btn.setFont(font)
        self.previous_btn.setCursor(QtGui.QCursor(QtCore.Qt.SizeHorCursor))
        self.previous_btn.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.previous_btn.setStyleSheet("QPushButton{\n"
"    background-color: #035397;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius:5px;\n"
"    border-color: beige;\n"
"    padding: 0px;\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: #7289DA;\n"
"}")
        self.previous_btn.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/icons/previous.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.previous_btn.setIcon(icon1)
        self.previous_btn.setIconSize(QtCore.QSize(170, 170))
        self.previous_btn.setObjectName("previous_btn")
        self.screenshot_btn = QtWidgets.QPushButton(Form)
        self.screenshot_btn.setGeometry(QtCore.QRect(480, 550, 191, 41))
        font = QtGui.QFont()
        font.setFamily("DejaVu Sans")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(False)
        self.screenshot_btn.setFont(font)
        self.screenshot_btn.setStyleSheet("QPushButton{\n"
"    background-color: #FED049;\n"
"    border-style: outset;\n"
"    border-radius:10px;\n"
"    border: 1px solid black;\n"
"    padding: 6px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"        background-color: #7289DA;\n"
"        color: white;\n"
"}")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/icons/screenshot.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.screenshot_btn.setIcon(icon2)
        self.screenshot_btn.setIconSize(QtCore.QSize(40, 52))
        self.screenshot_btn.setObjectName("screenshot_btn")
        self.get_zip_btn = QtWidgets.QPushButton(Form)
        self.get_zip_btn.setGeometry(QtCore.QRect(710, 550, 251, 41))
        font = QtGui.QFont()
        font.setFamily("DejaVu Sans")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(False)
        self.get_zip_btn.setFont(font)
        self.get_zip_btn.setStyleSheet("QPushButton{\n"
"    background-color: #FED049;\n"
"    border-style: outset;\n"
"    border-radius:10px;\n"
"    border: 1px solid black;\n"
"    padding: 6px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"        background-color: #7289DA;\n"
"        color: white;\n"
"}")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/icons/share.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.get_zip_btn.setIcon(icon3)
        self.get_zip_btn.setIconSize(QtCore.QSize(40, 35))
        self.get_zip_btn.setObjectName("screenshot_btn_2")
        self.token_label = QtWidgets.QLabel(Form)
        self.token_label.setGeometry(QtCore.QRect(1160, 30, 281, 51))
        font = QtGui.QFont()
        font.setFamily("FreeMono")
        font.setPointSize(22)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.token_label.setFont(font)
        self.token_label.setStyleSheet("color: beige;\n"
"border: 1px solid beige;\n"
"padding: 6px;\n"
"color: white;\n"
"border-radius: 10px;")
        self.token_label.setObjectName("label_38")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label_3.setText(_translate("Form", "Teacher Panel"))
        self.name1.setText(_translate("Form", "Harel Zeevi"))
        self.name2.setText(_translate("Form", "Harel Zeevi"))
        self.time.setText(_translate("Form", "Time Left: 01:40:00"))
        self.screenshot_btn.setText(_translate("Form", " Screenshot "))
        self.get_zip_btn.setText(_translate("Form", " Submitted Tests"))
        self.token_label.setText(_translate("Form", "Token: N2IS3S"))



class TestPanel(Ui_Form):

    def __init__(self, test_id, token, time_left):
        
        # init list of client names
        self.names = []

        # testId
        self.test_id = test_id

        self.time_left = time_left

        self.access_token = token


        
    def setupUi(self, Form, stackedWidget=None):
        ''' this function gets the stacked widget and changes 
        the shown page according to the events in the page '''
        
        super().setupUi(Form)
        
        self.token_label.setText("Token: " + self.access_token)

        # creating a QGraphicsDropShadowEffect object
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(3)
        shadow.setOffset(2, 2)
        shadow.setColor(Qt.black)
        self.container2.setGraphicsEffect(shadow)

        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(2)
        shadow.setOffset(2, 2)
        shadow.setColor(Qt.black)
        self.container1.setGraphicsEffect(shadow)
        

        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(3)
        shadow.setOffset(4, 4)
        shadow.setColor(Qt.black)
        self.panel.setGraphicsEffect(shadow)


        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(1)
        shadow.setOffset(4, 4)
        shadow.setColor(Qt.black)
        self.next_btn.setGraphicsEffect(shadow)


        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(1)
        shadow.setOffset(4, 4)
        shadow.setColor(Qt.black)
        self.previous_btn.setGraphicsEffect(shadow)


        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(1)
        shadow.setOffset(4, 4)
        shadow.setColor(Qt.black)
        self.screenshot_btn.setGraphicsEffect(shadow)
 
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(1)
        shadow.setOffset(4, 4)
        shadow.setColor(Qt.black)
        self.get_zip_btn.setGraphicsEffect(shadow)
                       
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(1)
        shadow.setOffset(4, 4)
        shadow.setColor(Qt.black)
        self.time.setGraphicsEffect(shadow)

        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(1)
        shadow.setOffset(4, 4)
        shadow.setColor(Qt.black)
        self.token_label.setGraphicsEffect(shadow)




        # define stack widget as a class property that is accessible within the class 
        self.stackedWidget = stackedWidget

        # 'next page'  button event that switches to next page 
        self.next_btn.clicked.connect(lambda: self.next_page())

        # 'previous page'  button event that switches to previous page 
        self.previous_btn.clicked.connect(lambda: self.previous_page())

        # 'screenshot btn'  button event that sends a screenshot refresh request to the student
        self.screenshot_btn.clicked.connect(lambda: self.refresh_screenshot())

        # 'get_zip btn'  button event that retrieves the submitted tests as zip file
        self.get_zip_btn.clicked.connect(lambda: self.download_zip())



    def save_base64_zip(self, base64_zip, save_location):
        # Decode the base64-encoded zip file string
        zip_data = base64.b64decode(base64_zip)

        # Write the zip file to the specified location
        with open(save_location, 'wb') as zip_file:
            zip_file.write(zip_data)

        print(f"Zip file saved at: {save_location}")



    def save_file_dialog(self, file_format, filename):
        ''' This function creates a file dialog for saving the docs 
            it will return the full path for the file to be saved'''
        
        # Create a widget to serve as the parent for the file dialog
        widget = QtWidgets.QWidget()
        
        file_extension = "." + file_format

        default_path = f'~/Downloads/{filename}'

        # Open a file dialog for saving a file
        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(widget, 'Save File', \
                default_path, f"{file_format.upper()} Files (*{file_extension})", options=QtWidgets.QFileDialog.Options())


        # Append the file extension if the user didn't include it
        if not file_path.endswith(file_extension):
            file_path += file_extension

        return file_path




    def download_zip(self):
        ''' This function retrieves the submitted tests as a zip file '''
        
        # sending a request to retieve the zip file as a base64 string from the server    

        # define the service name and account name to use for the jwt
        service_name = "myapp"
        account_name = "jwt_teacher"

        # retrieve the jwt from the keyring
        jwt_value = keyring.get_password(service_name, account_name)

        # add the jwt_value to the headers
        HEADERS = {"authorization": f"bearer {jwt_value}"}
            
        URL = f"https://cleverum.azurewebsites.net/api/teacher/getTestsZip/{self.test_id}"

        r = requests.get(URL, headers=HEADERS)
        response_json = json.loads(r.text)
        base64 = response_json["zipBase64"]
        
        print(URL)

        # get file path
        file_path = self.save_file_dialog("zip", "tests.zip");

        print(base64)

        # save the file in the given path from base64
        self.save_base64_zip(base64, file_path) 





    def update_slots(self):
        ''' This funciton updates the slots of the screenshots and
            the video streams'''
        
        ind_stu_1 = self.page_num * 2 + 1
        ind_stu_2 = self.page_num * 2 + 2
        
        # student 1 video stream placement 
        # student 1 screenshot placement 

        # only room for student 1, no other stuednt's left
        if ind_stu_2 == len(self.names):

            # hide students 2 frame           
            return 
            
        # student 1 video stream placement
        # student 1 screenshot placement 

            

    def next_page(self):
        ''' This function switches to the next existing page and shows it '''
        
        print("next")
  
        # if it is the last existing page (there's no next
        if len(self.names) - (self.page_num + 1) * 40 < 0:
            return 

        # increasing the number of the current page by 1 
        self.page_num = self.page_num + 1

        # init the new video streams in the slots
        self.update_slots()
        
        print("New Page: ", self.page_num)



    def previous_page(self):
        ''' This function switches to the previous existing page and shows it '''
        
        # if it is the first existing page (there's no previous)
        if self.page_num == 0:
            return

        # decreasing the number of the current page by 1 
        self.page_num = self.page_num - 1
        
        # init the new video streams in the slots
        self.update_slots()



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = TestPanel()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())

