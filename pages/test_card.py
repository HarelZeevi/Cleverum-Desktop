# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '../ui/test_card.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import requests
import json
import keyring
import threading
from add_test_card import AddTestCard
from PyQt5 import QtCore, QtGui, QtWidgets

# for file encoding 
import os
import base64

from waiting_room_teacher_sock import WaitingRoomTeacherSock



class Ui_Frame(object):
    def setupUi(self, Frame):
        Frame.setObjectName("Frame")
        Frame.resize(246, 420)
        Frame.setStyleSheet("QFrame{\n"
"    background-color: #4b4b4b;\n"
"    color: beige;\n"
"}")
        self.gridlayout = QtWidgets.QGridLayout(Frame)
        self.gridlayout.setObjectName("gridlayout")
        self.test_card = QtWidgets.QFrame(Frame)
        self.test_card.setStyleSheet("QFrame{\n"
"    background-color: #4b4b4b;\n"
"    color: beige;\n"
"    border: 0px;\n"
"}")
        self.test_card.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.test_card.setFrameShadow(QtWidgets.QFrame.Raised)
        self.test_card.setObjectName("test_card")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.test_card)
        self.verticalLayout_5.setContentsMargins(1, 1, 1, 1)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.frame_12 = QtWidgets.QFrame(self.test_card)
        self.frame_12.setStyleSheet("color:beige;\n"
"background-color: #2D033B;\n"
"border: 1px solid beige;\n"
"padding: 4px;")
        self.frame_12.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_12.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_12.setObjectName("frame_12")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_12)
        self.horizontalLayout_4.setSizeConstraint(QtWidgets.QLayout.SetMaximumSize)
        self.horizontalLayout_4.setContentsMargins(0, 9, -1, 8)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.topic = QtWidgets.QLabel(self.frame_12)
        font = QtGui.QFont()
        font.setFamily("URW Bookman [UKWN]")
        font.setPointSize(20)
        self.topic.setFont(font)
        self.topic.setStyleSheet("QFrame{\n"
"    border: 0px;\n"
"}")
        self.topic.setObjectName("topic")
        self.horizontalLayout_4.addWidget(self.topic)
        self.verticalLayout_5.addWidget(self.frame_12)
        self.frame_13 = QtWidgets.QFrame(self.test_card)
        self.frame_13.setStyleSheet("border:1px solid beige;\n"
"background-color: #453C67;\n"
"color:black;\n"
"padding: 4px;")
        self.frame_13.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_13.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_13.setObjectName("frame_13")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.frame_13)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.frame_14 = QtWidgets.QFrame(self.frame_13)
        self.frame_14.setStyleSheet("color:beige;\n"
"border: 0px solid beige;")
        self.frame_14.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_14.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_14.setObjectName("frame_14")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.frame_14)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_7.addItem(spacerItem)
        self.subtopic = QtWidgets.QLabel(self.frame_14)
        font = QtGui.QFont()
        font.setFamily("URW Bookman [UKWN]")
        font.setPointSize(14)
        self.subtopic.setFont(font)
        self.subtopic.setStyleSheet("border:0px;\n"
"color:white;")
        self.subtopic.setObjectName("subtopic")
        self.verticalLayout_7.addWidget(self.subtopic)
        self.label = QtWidgets.QLabel(self.frame_14)
        font = QtGui.QFont()
        font.setFamily("URW Bookman [urw]")
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout_7.addWidget(self.label)
        self.grade = QtWidgets.QLabel(self.frame_14)
        font = QtGui.QFont()
        font.setFamily("URW Bookman [UKWN]")
        font.setPointSize(14)
        self.grade.setFont(font)
        self.grade.setStyleSheet("border:0px;\n"
"")
        self.grade.setObjectName("grade")
        self.verticalLayout_7.addWidget(self.grade)
        self.frame = QtWidgets.QFrame(self.frame_14)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.download_btn = QtWidgets.QPushButton(self.frame)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.download_btn.setFont(font)
        self.download_btn.setStyleSheet("QPushButton{\n"
"    color: #7289da;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    color: white;\n"
"    text-decoration: underline;\n"
"}")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../ui/../icons/download.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.download_btn.setIcon(icon)
        self.download_btn.setObjectName("download_btn")
        self.horizontalLayout.addWidget(self.download_btn)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.verticalLayout_7.addWidget(self.frame)
        self.verticalLayout_6.addWidget(self.frame_14)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_6.addItem(spacerItem2)
        self.frame_15 = QtWidgets.QFrame(self.frame_13)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.frame_15.setFont(font)
        self.frame_15.setStyleSheet("\n"
"border: 0px solid beige;")
        self.frame_15.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_15.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_15.setObjectName("frame_15")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.frame_15)
        self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.start_btn = QtWidgets.QPushButton(self.frame_15)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.start_btn.setFont(font)
        self.start_btn.setStyleSheet("QPushButton{\n"
"    color: white;\n"
"    background-color: #282A3A;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: beige;\n"
"    padding: 6px;\n"
"\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"        background-color: #7289DA;\n"
"        color: white;\n"
"}")
        self.start_btn.setObjectName("start_btn")
        self.verticalLayout_8.addWidget(self.start_btn)
        self.upload_btn = QtWidgets.QPushButton(self.frame_15)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.upload_btn.setFont(font)
        self.upload_btn.setStyleSheet("QPushButton{\n"
"    color: white;\n"
"    background-color: #735F32;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: beige;\n"
"    padding: 6px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"        background-color: #FED049;\n"
"}")
        self.upload_btn.setObjectName("upload_btn")
        self.verticalLayout_8.addWidget(self.upload_btn)
        self.remove_btn = QtWidgets.QPushButton(self.frame_15)
        self.remove_btn.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.remove_btn.setFont(font)
        self.remove_btn.setStyleSheet("QPushButton{\n"
"    background-color: #f80000;\n"
"    color: black;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: beige;\n"
"    padding: 6px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"        background-color: black;\n"
"        color: white;\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    border: 2px solid #f87c7c;\n"
"    background-color:#f83e3e;\n"
"    color: #f87c7c;\n"
"}\n"
"")
        self.remove_btn.setObjectName("remove_btn")
        self.verticalLayout_8.addWidget(self.remove_btn)
        self.verticalLayout_6.addWidget(self.frame_15)
        self.verticalLayout_5.addWidget(self.frame_13)
        self.gridlayout.addWidget(self.test_card, 0, 0, 1, 1)

        self.retranslateUi(Frame)
        QtCore.QMetaObject.connectSlotsByName(Frame)

    def retranslateUi(self, Frame):
        _translate = QtCore.QCoreApplication.translate
        Frame.setWindowTitle(_translate("Frame", "Frame"))
        self.topic.setText(_translate("Frame", "English"))
        self.subtopic.setText(_translate("Frame", "Unseen Module G"))
        self.label.setText(_translate("Frame", "Time Limit: 1:45"))
        self.grade.setText(_translate("Frame", "Grade: 11"))
        self.download_btn.setText(_translate("Frame", "test.doc"))
        self.start_btn.setText(_translate("Frame", "Start"))
        self.upload_btn.setText(_translate("Frame", "Upload"))
        self.remove_btn.setText(_translate("Frame", "Remove"))


class TestCard(Ui_Frame): 
    '''this classes adds the page switching funcitonality to the generated code'''
     
    def __init__(self, tests, index, stackedPages):
        
        # init tests list 
        self.tests = tests
        
        # init the test
        self.test = tests[index]

        # init test's index inside the tests list  
        self.index = index
        
        # init pages stack widget
        self.stackedPages = stackedPages



    def setupUi(self, Form, stackedWidget, remove_enabled=False):
        ''' this function gets the stacked widget and changes 
        the shown page according to the events in the page '''
         
        super().setupUi(Form)
    

        # init the test properties in the ui 
        self.topic.setText(self.test["topic"])
        self.subtopic.setText(self.test["subtopic"])
        self.grade.setText(f"Grade: {self.test['grade']}")
        self.label.setText(self.test["timeLimit"]) 
        
        # hide download_btn if ther's no uplaoded test file
        if self.test["filename"] is not None:
            self.download_btn.setText(self.test["filename"])
        else:
            frame_retain = self.frame.sizePolicy();
            frame_retain.setRetainSizeWhenHidden(False);
            self.frame.setSizePolicy(frame_retain);

            self.frame.hide()
        
        # define stack widget as a class property that is accessible within the class 
        self.stackedWidget = stackedWidget
        
        # enable remove button if it was required explicitly
        self.remove_btn.setEnabled(remove_enabled)

        # 'remove' button event that removes the tests
        self.remove_btn.clicked.connect(lambda: self.remove_test()) 
        
        # 'upload' button event that uploads the test's document
        self.upload_btn.clicked.connect(lambda: self.upload_test())
        
        # 'download' button event that downloads the test's document
        self.download_btn.clicked.connect(lambda: self.download_test())

        # 'start' button event that triggers a call that creates a test instance
        self.start_btn.clicked.connect(lambda: self.start_test())



    def save_file_dialog(self, file_format, filename):
        ''' This function creates a file dialog for saving the docs 
            it will return the full path for the file to be saved'''
        
        # Create a widget to serve as the parent for the file dialog
        widget = QtWidgets.QWidget()
        
        file_extension = "." + file_format

        default_path = f'~/Downloads/{filename}'

        # Open a file dialog for saving a file
        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(widget, 'Save File', \
                default_path, f"{file_format.upper()} Files (*{file_extension})", options=QtWidgets.QFileDialog.Options())


        # Append the file extension if the user didn't include it
        if not file_path.endswith(file_extension):
            file_path += file_extension

        return file_path

    

    def base64_to_file(self, base64_string, file_path):
        ''' This function gets a base64 string and saves it as a file '''
        # Decode the base64 string to bytes
        file_bytes = base64.b64decode(base64_string)

        # Create the directories in the file path if they don't already exist
        os.makedirs(os.path.dirname(file_path), exist_ok=True)

        # Write the file bytes to the file
        with open(file_path, 'wb') as file:
            file.write(file_bytes)
    


    def download_test(self):
        ''' This function downloads the test's document from the server '''
        

        # define the service name and account name to use for the jwt
        service_name = "myapp"
        account_name = "jwt"

        # retrieve the jwt from the keyring
        jwt_value = keyring.get_password(service_name, account_name)

        # add the jwt_value to the headers
        HEADERS = {"authorization": f"bearer {jwt_value}"}#,
                #      "Content-Type": "application/msword"}
            
        URL = "http://localhost:3000/api/teacher/getTestDocument"

        PARAMS = {'testId': self.test["id"],        # test's DB id
                'filename': self.test["filename"]}  # test's filename

        r = requests.get(URL, json=PARAMS, headers=HEADERS)
        print(PARAMS)
        response_json = json.loads(r.text)
        base64 = response_json["file"]
        
        # get file path 
        ext = os.path.splitext(self.test["filename"])[1][1:]
        file_path = self.save_file_dialog(ext, PARAMS["filename"]);

        print(base64)

        # save the file in the given path from base64
        self.base64_to_file(base64, file_path) 



    def upload_test(self):
        ''' This function uploads the test document 
            to the server'''
        
        # create a file dialog and get the requested file's path
        dialog = QtWidgets.QFileDialog() 

        # set file filter
        dialog.setNameFilter("Images (*.doc *.docx)")
        
        # which files are allowed
        dialog.setFileMode(QtWidgets.QFileDialog.FileMode.ExistingFiles)

        # set dir 
        dialog.setDirectory('~/')
        
        # exec dialog
        if dialog.exec_():
            path = dialog.selectedFiles()[0]
        
        filename = os.path.basename(path)

        # update tests list
        self.tests[self.index]["filename"] = filename

        # show test frame
        self.download_btn.setText(filename)
        self.frame.show()

        with open(path, 'rb') as file:
            
            # encoding file to base64 
            base64file = base64.b64encode(file.read())

            # define the service name and account name to use for the jwt
            service_name = "myapp"
            account_name = "jwt"

            # retrieve the jwt from the keyring
            jwt_value = keyring.get_password(service_name, account_name)

            # add the jwt_value to the headers
            HEADERS = {"authorization": f"bearer {jwt_value}"}#,
                    #      "Content-Type": "application/msword"}
                
            URL = "http://localhost:3000/api/teacher/uploadDocument"

            PARAMS = {'base64file': base64file.decode("utf-8"), # base64 encoded string 
                    'filename': filename,                       # extract base name using os lib
                    'testId': self.test["id"]}                  # test'd DB id

            r = requests.post(URL, json=PARAMS, headers=HEADERS)
           
            print(r)



    def reinit_frame(self):
        '''this function clears the current qstackedwidget
            object from all of it's widgets, and reinitialize it with a new 
            "AddTest" card '''


        # looping through widgets in qstackedwidget
        for i in range(self.stackedWidget.count() - 1, -1, -1):
        
            # remove each widget
            current = self.stackedWidget.widget(i)
            self.stackedWidget.removeWidget(current)

 


        # init a new add Test card 
        self.add_test = QtWidgets.QFrame()
        ui = AddTestCard()
        ui.setupUi(self.add_test, self.stackedWidget)
        self.add_test.setObjectName("add_test")
        self.stackedWidget.addWidget(self.add_test)
    


    # removal request by ID 
    def removal_request(self):
        ''' This function sends a reoval request to the server
            that removes the test fro the database by its ID'''

        # define the service name and account name to use for the jwt
        service_name = "myapp"
        account_name = "jwt"

        # retrieve the jwt from the keyring
        jwt_value = keyring.get_password(service_name, account_name)
       
        # define the http request parameters 
        PARAMS = {
                "testId": self.test["id"]
        }
     
        # add the jwt_value to the headers
        headers = {"authorization": f"bearer {jwt_value}"}
            
        url = "http://localhost:3000/api/teacher/removeTest"
        r = requests.delete(url, headers=headers, json=PARAMS)
        
    
 

    # this function will be called when the 'remove' button is clicked
    def remove_test(self):
        ''' this function removes the chosen tests and display the frames again
            without the removed test'''
        
        # send request to the server that removes the test
        self.removal_request() 

        # remove the test fro them tests list
        del self.tests[self.index]

        # reinitialize the frame 
        self.reinit_frame()

    

    def start_test(self):
        ''' This function creates a test instance in the server and returns the 
            test's access token'''
        
 
        # define the service name and account name to use for the jwt
        service_name = "myapp"
        account_name = "jwt"

        # retrieve the jwt from the keyring
        jwt_value = keyring.get_password(service_name, account_name)
       
        # define the http request parameters 
        PARAMS = {
                "testId": self.test["id"]
        }
     
        # add the jwt_value to the headers
        headers = {"authorization": f"bearer {jwt_value}"}
            
        url = "http://localhost:3000/api/teacher/startTest"
        r = requests.post(url, headers=headers, json=PARAMS)

        # waiting room page 
        self.waiting_room_teacher = QtWidgets.QWidget()
        
        # run gui
        self.waiting_room_teacher = QtWidgets.QWidget()
        integrated_obj = WaitingRoomTeacherSock(port=8080, token='ABC123', max_clients=40)
        integrated_obj.setupUi(self.waiting_room_teacher, self.stackedPages)
        integrated_obj.update_names()

        self.stackedPages.addWidget(self.waiting_room_teacher)           
        self.stackedPages.setCurrentIndex(3)


        # run tcp server
        t_server = threading.Thread(target=integrated_obj.run, daemon=True)
        t_server.start()



        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Frame = QtWidgets.QFrame()
    ui = Ui_Frame()
    ui.setupUi(Frame)
    Frame.show()
    sys.exit(app.exec_())
