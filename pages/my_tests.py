# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'my_tests1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import resources
from PyQt5 import QtCore, QtGui, QtWidgets

# import frames
from add_test_card import AddTestCard
from create_test_card import CreateTestCard
from test_card import TestCard

# for jwt retreiving 
import keyring 

# for http requests
import requests
import json



class Ui_Form(object):  
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1281, 717)
        Form.setStyleSheet("background-color:#2C2F33;")
        self.container = QtWidgets.QFrame(Form)
        self.container.setGeometry(QtCore.QRect(140, 190, 991, 444))
        self.container.setStyleSheet("QFrame{\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: black;\n"
"    padding: 6px;    \n"
"    background-color: #23272a;\n"
"    botder: 1px solid white;\n"
"}\n"
"QStackedWidget{\n"
"    border-width: 0px;\n"
"    padding: 0px;    \n"
"\n"
"}")
        self.container.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.container.setFrameShadow(QtWidgets.QFrame.Raised)
        self.container.setObjectName("container")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.container)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.stack2 = QtWidgets.QStackedWidget(self.container)
        self.stack2.setMinimumSize(QtCore.QSize(235, 410))
        #self.stack2.setMaximumSize(QtCore.QSize(235, 410))
        self.stack2.setStyleSheet("QStackedWidget{\n"
"    padding: 0px;    \n"
"}")
        self.stack2.setObjectName("stack2")
        self.page_7 = QtWidgets.QWidget()
        self.page_7.setObjectName("page_7")
        self.page_8 = QtWidgets.QWidget()
        self.page_8.setObjectName("page_8")
        self.horizontalLayout_3.addWidget(self.stack2)
        self.stack1 = QtWidgets.QStackedWidget(self.container)
        self.stack1.setMinimumSize(QtCore.QSize(235, 410))
        #self.stack1.setMaximumSize(QtCore.QSize(235, 410))
        self.stack1.setStyleSheet("QStackedWidget{\n"
"    padding: 0px;    \n"
"}")
        self.stack1.setObjectName("stack1")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.horizontalLayout_3.addWidget(self.stack1)
        self.stack3 = QtWidgets.QStackedWidget(self.container)
        self.stack3.setMinimumSize(QtCore.QSize(235, 410))
        #self.stack3.setMaximumSize(QtCore.QSize(235, 410))
        self.stack3.setStyleSheet("QStackedWidget{\n"
"    padding: 0px;    \n"
"}")
        self.stack3.setObjectName("stack3")
        self.page_5 = QtWidgets.QWidget()
        self.page_5.setObjectName("page_5")
        self.page_6 = QtWidgets.QWidget()
        self.page_6.setObjectName("page_6")
        self.horizontalLayout_3.addWidget(self.stack3)
        self.stack4 = QtWidgets.QStackedWidget(self.container)
        self.stack4.setMinimumSize(QtCore.QSize(235, 410))
        #self.stack4.setMaximumSize(QtCore.QSize(235, 410))
        self.stack4.setStyleSheet("QStackedWidget{\n"
"    padding: 0px;    \n"
"}")
        self.stack4.setObjectName("stack4")
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.horizontalLayout_3.addWidget(self.stack4)
        self.label_11 = QtWidgets.QLabel(Form)
        self.label_11.setGeometry(QtCore.QRect(520, 110, 191, 51))
        font = QtGui.QFont()
        font.setFamily("Sitka Text")
        font.setPointSize(26)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("color: white;")
        self.label_11.setObjectName("label_11")
        self.previous_btn = QtWidgets.QPushButton(Form)
        self.previous_btn.setGeometry(QtCore.QRect(20, 330, 71, 71))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.previous_btn.sizePolicy().hasHeightForWidth())
        self.previous_btn.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.previous_btn.setFont(font)
        self.previous_btn.setCursor(QtGui.QCursor(QtCore.Qt.SizeHorCursor))
        self.previous_btn.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.previous_btn.setStyleSheet("QPushButton{\n"
"    background-color: #2C2F33;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius:5px;\n"
"    border-color: beige;\n"
"    padding: 0px;\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: #777777;\n"
"}")
        self.previous_btn.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/icons/next4 (copy).png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.previous_btn.setIcon(icon)
        self.previous_btn.setIconSize(QtCore.QSize(55, 55))
        self.previous_btn.setObjectName("previous_btn")
        self.next_btn = QtWidgets.QPushButton(Form)
        self.next_btn.setGeometry(QtCore.QRect(1170, 350, 71, 71))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.next_btn.setFont(font)
        self.next_btn.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.next_btn.setAutoFillBackground(False)
        self.next_btn.setStyleSheet("QPushButton{\n"
"    background-color: #2C2F33;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius:5px;\n"
"    border-color: beige;\n"
"    padding: 0px;\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: #777777;\n"
"}")
        self.next_btn.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/icons/next4.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.next_btn.setIcon(icon1)
        self.next_btn.setIconSize(QtCore.QSize(55, 55))
        self.next_btn.setObjectName("next_btn")
        self.new_page_btn = QtWidgets.QPushButton(Form)
        self.new_page_btn.setGeometry(QtCore.QRect(550, 670, 141, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(False)
        font.setWeight(50)
        self.new_page_btn.setFont(font)
        self.new_page_btn.setStyleSheet("QPushButton{\n"
"    color: black;\n"
"    background-color: #FED049;\n"
"    border-style: outset;\n"
"    border-width: 3px;\n"
"    border-radius: 10px;\n"
"    border-color: beige;\n"
"    padding: 6px;\n"
"\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"        background-color: #7289DA;\n"
"        color: white;\n"
"}")
        self.new_page_btn.setObjectName("new_page_btn")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(-140, -160, 391, 331))
        self.label.setObjectName("label")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(830, -190, 361, 361))
        self.label_3.setObjectName("label_3")

        self.retranslateUi(Form)
        self.stack1.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(Form)


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label_11.setText(_translate("Form", "My Tests"))
        self.new_page_btn.setText(_translate("Form", "New Page"))
        self.label.setText(_translate("Form", "<html><head/><body><p><img src=\":/illustrations/imgs/17.png\"/></p></body></html>"))
        self.label_3.setText(_translate("Form", "<html><head/><body><p><img src=\":/illustrations/imgs/18.png\"/></p></body></html>"))



class MyTests(Ui_Form): 
    '''this classes adds the page switching funcitonality to the generated code'''

    def __init__(self): 
        # init list of tests 
        self.tests = []
        

    def setupUi(self, Form, stackedWidget):
        ''' this function gets the stacked widget and changes 
        the shown page according to the events in the page '''
        
        self.get_tests()

        super().setupUi(Form)
       
        
        '''
        # init the 4 stackWidgets with frames 
        self.init_empty_frames(self.stack1)
        self.init_empty_frames(self.stack2)
        self.init_empty_frames(self.stack3)
        self.init_empty_frames(self.stack4)
        '''

        # define stack widget as a class property that is accessible within the class 
        self.stackedWidget = stackedWidget

        # init list of 4 stacks 
        self.stacks = [self.stack1, self.stack2, self.stack3, self.stack4]

        # dill frames in the first page 
        self.fill_frames(0)


    def init_empty_frames(self, stack):
        '''This function intialize the frames of a given QStackedWidget Object in my_tests'''
        
        # add test frame stack
        self.add_test = QtWidgets.QFrame()
        ui = AddTestCard()
        ui.setupUi(self.add_test, stack)
        self.add_test.setObjectName("add_test")
        stack.addWidget(self.add_test)
       
        # create test card stack 
        self.create_test = QtWidgets.QFrame()
        ui = CreateTestCard()
        ui.setupUi(self.create_test, stack)
        self.add_test.setObjectName("add_test")
        stack.addWidget(self.create_test)
  
 
        # test card stack
        self.test = QtWidgets.QFrame()
        ui = TestCard()
        ui.setupUi(self.test, stack)
        self.test.setObjectName("test")
        stack.addWidget(self.test)
 


    # this function will be called before the page is rendered with the tests 
    def get_tests(self):
        ''' this function gets the tests that were created by the user'''
        
        
        # Define the service name and account name to use for the JWT
        service_name = "myapp"
        account_name = "jwt"

        # Retrieve the JWT from the keyring
        jwt_value = keyring.get_password(service_name, account_name)

        # add the jwt_value to the headers
        HEADERS = {"Authorization": f"Bearer {jwt_value}"}
            
        URL = "http://localhost:8080/api/teacher/getTests"
        r = requests.get(URL, headers=HEADERS)
        
        # occupy the list of tests 
        self.tests = json.loads(r.text)    
        
        print(self.tests)
    


    def clear_stacks(self):
        '''this function clears a given qstackedwidget
            object from all of it's widgets'''

        # looping through the list of 4 stacks  
        for stack in self.stacks:
            
            # looping through widgets in qstackedwidget
            for i in range(stack.count()):
                
                # remove each widget
                current = stack.widget(i)
                stack.removeWidget(current)



    def fill_frames(self, page_num):
        '''this function gets a pge number and puts the tests
            in it according to the list of tests'''
        
        # first clear the previous widgets in the stacks
        self.clear_stacks()

        # there's enough room for all 4 tests        
        if len(self.tests) - page_num * 4  >= 4:
 
            for i in range(page_num * 4, page_num * 4 + 4): 
                
                # current stack 
                stack = self.stacks[i % 4]

                # curernt test
                test = self.tests[i]


                # test card stack
                self.test = QtWidgets.QFrame()
                ui = TestCard(test)
                ui.setupUi(self.test, stack)
                self.test.setObjectName("test")
                stack.addWidget(self.test)
        
        # there's room for less than 4 tests
        else:
            
            # the number 0of remaining tests to fill
            remains_num = self.tests - page_num * 4
            
            for i in range(remains_num):

                # current stack 
                stack = self.stacks[i % 4]

                # curernt test
                test = self.tests[i]

                # test card stack
                self.test = QtWidgets.QFrame()
                ui = TestCard(test)
                ui.setupUi(self.test, stack)
                self.test.setObjectName("test")
                stack.addWidget(self.test)

            # the number of remaining empty slots
            for i in range(4 - remains_num):
               
                # current stack 
                stack = self.stacks[i % 4]
                

                init_empty_frames(stack)
    


    def switch_to_waiting_room():
        '''this function starts the waiting room page'''
        pass 




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = MyTests()
    ui.setupUi(Form, None)
    Form.show()
    sys.exit(app.exec_())
